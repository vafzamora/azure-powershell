#!meta

{"kernelInfo":{"defaultKernelName":"pwsh","items":[{"aliases":[],"languageName":"pwsh","name":"pwsh"}]}}

#!markdown

## Create a cluster and, install ALB Controller and Application Gateway for Containers
**Why az commands are taking too much time to complete?**

#!pwsh

$TenantId = "16b3c013-d300-468d-ac64-7eda0820b6d3" # "<tenant-id>"
$SubscriptionId = "0d60743b-3d32-43fa-b68c-36eb0e8a1f5b" # "<subscription-id>"

$ResourceGroupName = "vz-aks-rg"
$ClusterName = "vz-aks-01"
$Location = "EastUs"
$VmSize = "Standard_DS2_v2"

#!pwsh

az login --tenant $TenantId 
az account set --subscription $SubscriptionId

#!markdown

### Deploy the AKS cluster with azure network plugin, workload identity and oidc issuer 

#!pwsh

# Create a new resource group
az group create --name $ResourceGroupName --location $Location

# Deploy new AKS cluster
az aks create `
    --resource-group $ResourceGroupName `
    --name $ClusterName `
    --location  $Location `
    --node-vm-size $VmSize `
    --network-plugin azure `
    --enable-oidc-issuer `
    --enable-workload-identity `
    --generate-ssh-key

#!pwsh

az aks get-credentials --resource-group $ResourceGroupName --name $ClusterName --overwrite-existing

#!markdown

### Create a user managed identity for ALB controller and federate the identity as Workload Identity to use in the AKS cluster.

#!pwsh

$IdentityResourceName='azure-alb-identity'

$mcResourceGroup=$(az aks show --resource-group $ResourceGroupName --name $ClusterName --query "nodeResourceGroup" -o tsv)
$mcResourceGroupId=$(az group show --name $mcResourceGroup --query id -o tsv)

Write-Output "Creating identity $IdentityResourceName in resource group $ResourceGroupName"
az identity create --resource-group $ResourceGroupName --name $IdentityResourceName
$principalId="$(az identity show -g $ResourceGroupName -n $IdentityResourceName --query principalId -o tsv)"

Write-Output "Waiting 60 seconds to allow for replication of the identity..."
Start-Sleep 60

#!pwsh

Write-Output "Apply Reader role to the AKS managed cluster resource group for the newly provisioned identity"
az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --scope $mcResourceGroupId --role "acdd72a7-3385-48ef-bd42-f606fba81ae7" # Reader role

#!pwsh

Write-Output "Set up federation with AKS OIDC issuer"
$AksOidcIssuer="$(az aks show -n "$ClusterName" -g "$ResourceGroupName" --query "oidcIssuerProfile.issuerUrl" -o tsv)"
az identity federated-credential create `
    --name "azure-alb-identity" `
    --identity-name "$IdentityResourceName" `
    --resource-group $ResourceGroupName `
    --issuer "$AksOidcIssuer" `
    --subject "system:serviceaccount:azure-alb-system:alb-controller-sa"

#!markdown

### Install the ALB controller using Helm

#!pwsh

C:\helm\helm.exe install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller `
    --version 0.6.3 `
    --set albController.podIdentity.clientID=$(az identity show -g $ResourceGroupName -n azure-alb-identity --query clientId -o tsv)

#!markdown

### Create Application Gateway for containers managed by ALB controller

#!pwsh

$ClusterSubnetId=$(az vmss list --resource-group $mcResourceGroup --query '[0].virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].ipConfigurations[0].subnet.id' -o tsv)
$VNetName, $VNetResourceGroup, $VNetId = $(az network vnet show --ids $ClusterSubnetId --query '[name, resourceGroup, id]' -o tsv) -split "\t"

$SubentAddressPrefix='10.225.1.0/24'
$AlbSubnetName='alb-subnet' # subnet name can be any non-reserved subnet name (i.e. GatewaySubnet, AzureFirewallSubnet, AzureBastionSubnet would all be invalid)
az network vnet subnet create --resource-group $VNetResourceGroup --vnet-name $VNetName --name $AlbSubnetName --address-prefixes $SubentAddressPrefix --delegations 'Microsoft.ServiceNetworking/trafficControllers'
$AlbSubnetId=$(az network vnet subnet show `
                    --name $AlbSubnetName `
                    --resource-group $VNetResourceGroup `
                    --vnet-name $VNetName `
                    --query '[id]' `
                    --output tsv)

#!markdown

### Role assignments for Application Gateway for Containers

#!pwsh

# Delegate AppGw for Containers Configuration Manager role to AKS Managed Cluster RG
az role assignment create `
    --assignee-object-id $principalId `
    --assignee-principal-type ServicePrincipal `
    --scope $mcResourceGroupId `
    --role "fbc52c3f-28ad-4303-a892-8a056630b8f1"

# Delegate Network Contributor permission for join to association subnet
az role assignment create `
    --assignee-object-id $principalId `
    --assignee-principal-type ServicePrincipal `
    --scope $AlbSubnetId `
    --role "4d97b98b-1d4f-4787-a291-c67834d212e7"

#!markdown

### Create Application Gateway for containers managed by ALB controller

#!pwsh

@"
apiVersion: v1
kind: Namespace
metadata:
  name: alb-test-infra
"@ | kubectl apply -f -

@"
apiVersion: alb.networking.azure.io/v1
kind: ApplicationLoadBalancer
metadata:
  name: alb-test
  namespace: alb-test-infra
spec:
  associations:
  - $AlbSubnetId
"@ | kubectl apply -f -

#!markdown

### Traffic Split Scenario

Create a sample application deployment 

This command creates the following on your cluster:
* a namespace called test-infra
* two services called backend-v1 and backend-v2 in the test-infra namespacem
* two deployments called backend-v1 and backend-v2 in the test-infra namespace

#!pwsh

kubectl apply -f https://trafficcontrollerdocs.blob.core.windows.net/examples/traffic-split-scenario/deployment.yaml

#!markdown

### Create a gateway

#!pwsh

@"
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: gateway-01
  namespace: test-infra
  annotations:
    alb.networking.azure.io/alb-namespace: alb-test-infra
    alb.networking.azure.io/alb-name: alb-test
spec:
  gatewayClassName: azure-alb-external
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same
"@ | kubectl apply -f -

#!markdown

Use this command to check gateway status

#!pwsh

kubectl get gateway gateway-01 -n test-infra -o yaml

#!markdown

### Create an HTTPRoute with 50/50 split

#!pwsh

@"
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: traffic-split-route
  namespace: test-infra
spec:
  parentRefs:
  - name: gateway-01
  rules:
  - backendRefs:
    - name: backend-v1
      port: 8080
      weight: 50
    - name: backend-v2
      port: 8080
      weight: 50
"@ | kubectl apply -f -

#!markdown

Use this command to check HTTPRoute status

#!pwsh

kubectl get httproute traffic-split-route -n test-infra -o yaml

#!markdown

Use this command to get the gateway fqdn 

#!pwsh

$fqdn=$(kubectl get gateway gateway-01 -n test-infra -o jsonpath='{.status.addresses[0].value}')

#!markdown

Use this command to test the traffic split

#!pwsh

while($true) { curl "http://$fqdn"; Start-Sleep -Seconds 1 }
